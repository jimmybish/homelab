---
- name: Ensure docker-compose is installed
  ansible.builtin.package:
    name: docker-compose
    state: present

- name: Ensure Docker service is running
  ansible.builtin.service:
    name: docker
    state: started
    enabled: true

- name: Setup Parent directory
  ansible.builtin.file:
    path: "{{ docker_storage_folder }}"
    state: directory
    mode: '0755'
    owner: "{{ docker_user }}"
    group: "{{ docker_user }}"

- name: Setup Sonarr directory
  ansible.builtin.file:
    path: "{{ arr_suite_sonarr_folder }}"
    state: directory
    mode: '0755'
    owner: "{{ docker_user }}"
    group: "{{ docker_user }}"

- name: Setup Radarr directory
  ansible.builtin.file:
    path: "{{ arr_suite_radarr_folder }}"
    state: directory
    mode: '0755'
    owner: "{{ docker_user }}"
    group: "{{ docker_user }}"

- name: Setup Prowlarr directory
  ansible.builtin.file:
    path: "{{ arr_suite_prowlarr_folder }}"
    state: directory
    mode: '0755'
    owner: "{{ docker_user }}"
    group: "{{ docker_user }}"

- name: Setup SABnzbd directory
  ansible.builtin.file:
    path: "{{ arr_suite_sabnzbd_folder }}"
    state: directory
    mode: '0755'
    owner: "{{ docker_user }}"
    group: "{{ docker_user }}"

- name: Setup Lidarr directory
  ansible.builtin.file:
    path: "{{ arr_suite_lidarr_folder }}"
    state: directory
    mode: '0755'
    owner: "{{ docker_user }}"
    group: "{{ docker_user }}"

- name: Setup qBittorrent directory
  ansible.builtin.file:
    path: "{{ arr_suite_qbittorrent_folder }}"
    state: directory
    mode: '0755'
    owner: "{{ docker_user }}"
    group: "{{ docker_user }}"

- name: Allow Sonarr port through UFW
  community.general.ufw:
    rule: allow
    port: "{{ arr_suite_sonarr_port }}"
    proto: tcp
  when: ansible_os_family == "Debian"

- name: Allow Radarr port through UFW
  community.general.ufw:
    rule: allow
    port: "{{ arr_suite_radarr_port }}"
    proto: tcp
  when: ansible_os_family == "Debian"

- name: Allow Prowlarr port through UFW
  community.general.ufw:
    rule: allow
    port: "{{ arr_suite_prowlarr_port }}"
    proto: tcp
  when: ansible_os_family == "Debian"

- name: Allow SABnzbd port through UFW
  community.general.ufw:
    rule: allow
    port: "{{ arr_suite_sabnzbd_port }}"
    proto: tcp
  when: ansible_os_family == "Debian"

- name: Allow qBittorrent WebUI port through UFW
  community.general.ufw:
    rule: allow
    port: "{{ arr_suite_qbittorrent_webui_port }}"
    proto: tcp
  when: ansible_os_family == "Debian"

- name: Allow qBittorrent peer port through UFW (TCP)
  community.general.ufw:
    rule: allow
    port: "{{ arr_suite_qbittorrent_peer_port }}"
    proto: tcp
  when: ansible_os_family == "Debian"

- name: Allow qBittorrent peer port through UFW (UDP)
  community.general.ufw:
    rule: allow
    port: "{{ arr_suite_qbittorrent_peer_port }}"
    proto: udp
  when: ansible_os_family == "Debian"

- name: Allow Lidarr port through UFW
  community.general.ufw:
    rule: allow
    port: "{{ arr_suite_lidarr_port }}"
    proto: tcp
  when: ansible_os_family == "Debian"

- name: Get fileserver IP
  ansible.builtin.set_fact:
    arr_fileserver_ip: "{{ lookup('community.general.dig', (lookup('ansible.builtin.inventory_hostnames', 'qnap').split(','))[0]) }}"

- name: Deploy *Arr using Docker Compose
  ansible.builtin.template:
    src: "templates/docker_compose.yaml.j2"
    dest: "{{ docker_storage_folder }}/docker-compose.yaml"
    mode: '0644'
    owner: "{{ docker_user }}"
    group: "{{ docker_user }}"
    force: true
  notify:
    - Start Containers

- name: Run *Arr docker-compose up
  community.docker.docker_compose_v2:
    project_src: "{{ docker_storage_folder }}"
    state: present
    remove_orphans: true

# Check if *Arr suite ports are open and listening
- name: Check if *Arr suite ports are open and listening
  community.general.listen_ports_facts:

- name: Assert *Arr suite ports are listening
  ansible.builtin.assert:
    that:
      - arr_suite_sonarr_port | int in (ansible_facts.tcp_listen | map(attribute='port') | list)
      - arr_suite_radarr_port | int in (ansible_facts.tcp_listen | map(attribute='port') | list)
      - arr_suite_prowlarr_port | int in (ansible_facts.tcp_listen | map(attribute='port') | list)
      - arr_suite_sabnzbd_port | int in (ansible_facts.tcp_listen | map(attribute='port') | list)
      - arr_suite_qbittorrent_webui_port | int in (ansible_facts.tcp_listen | map(attribute='port') | list)
      - arr_suite_qbittorrent_peer_port | int in (ansible_facts.tcp_listen | map(attribute='port') | list)
      - arr_suite_qbittorrent_peer_port | int in (ansible_facts.udp_listen | map(attribute='port') | list)
      - arr_suite_lidarr_port | int in (ansible_facts.tcp_listen | map(attribute='port') | list)
    fail_msg: "One or more *Arr suite ports are not open and listening!"
    success_msg: "All *Arr suite ports are open and listening."

# DNS Alias Configuration (Required for web interfaces)
- name: Get DNS resolver host overrides from pfSense
  ansible.builtin.uri:
    url: "https://{{ groups['pfsense_host'][0] }}/api/v2/services/dns_resolver/host_overrides"
    method: GET
    headers:
      X-API-Key: "{{ pfsense_api_key }}"
    validate_certs: false
    return_content: true
  register: pfsense_dns_overrides
  delegate_to: localhost
  when: arr_suite_configure_dns | default(true)

- name: Find proxy host override entry in pfSense
  ansible.builtin.set_fact:
    proxy_host_override: >-
      {{ pfsense_dns_overrides.json.data
         | selectattr('host', 'equalto', 'proxy')
         | selectattr('domain', 'equalto', internal_domain)
         | list
         | first
         | default({}) }}
  when:
    - arr_suite_configure_dns | default(true)
    - pfsense_dns_overrides.json.data is defined

- name: Check if sonarr alias exists under proxy host override
  ansible.builtin.set_fact:
    sonarr_alias_exists: >-
      {{ proxy_host_override.aliases | default([])
         | selectattr('host', 'equalto', 'sonarr')
         | selectattr('domain', 'equalto', internal_domain)
         | list
         | length > 0 }}
  when:
    - arr_suite_configure_dns | default(true)
    - proxy_host_override is defined
    - proxy_host_override | length > 0

- name: Check if radarr alias exists under proxy host override
  ansible.builtin.set_fact:
    radarr_alias_exists: >-
      {{ proxy_host_override.aliases | default([])
         | selectattr('host', 'equalto', 'radarr')
         | selectattr('domain', 'equalto', internal_domain)
         | list
         | length > 0 }}
  when:
    - arr_suite_configure_dns | default(true)
    - proxy_host_override is defined
    - proxy_host_override | length > 0

- name: Check if prowlarr alias exists under proxy host override
  ansible.builtin.set_fact:
    prowlarr_alias_exists: >-
      {{ proxy_host_override.aliases | default([])
         | selectattr('host', 'equalto', 'prowlarr')
         | selectattr('domain', 'equalto', internal_domain)
         | list
         | length > 0 }}
  when:
    - arr_suite_configure_dns | default(true)
    - proxy_host_override is defined
    - proxy_host_override | length > 0

- name: Check if lidarr alias exists under proxy host override
  ansible.builtin.set_fact:
    lidarr_alias_exists: >-
      {{ proxy_host_override.aliases | default([])
         | selectattr('host', 'equalto', 'lidarr')
         | selectattr('domain', 'equalto', internal_domain)
         | list
         | length > 0 }}
  when:
    - arr_suite_configure_dns | default(true)
    - proxy_host_override is defined
    - proxy_host_override | length > 0

- name: Check if sabnzbd alias exists under proxy host override
  ansible.builtin.set_fact:
    sabnzbd_alias_exists: >-
      {{ proxy_host_override.aliases | default([])
         | selectattr('host', 'equalto', 'sabnzbd')
         | selectattr('domain', 'equalto', internal_domain)
         | list
         | length > 0 }}
  when:
    - arr_suite_configure_dns | default(true)
    - proxy_host_override is defined
    - proxy_host_override | length > 0

- name: Check if qbittorrent alias exists under proxy host override
  ansible.builtin.set_fact:
    qbittorrent_alias_exists: >-
      {{ proxy_host_override.aliases | default([])
         | selectattr('host', 'equalto', 'qbittorrent')
         | selectattr('domain', 'equalto', internal_domain)
         | list
         | length > 0 }}
  when:
    - arr_suite_configure_dns | default(true)
    - proxy_host_override is defined
    - proxy_host_override | length > 0

- name: Display DNS alias status for sonarr
  ansible.builtin.debug:
    msg: >-
      {% if proxy_host_override | length == 0 %}
      Warning: Proxy host override not found in pfSense DNS
      {% elif sonarr_alias_exists %}
      sonarr DNS alias exists under proxy.{{ internal_domain }}
      {% else %}
      sonarr DNS alias missing - will be created
      {% endif %}
  when: arr_suite_configure_dns | default(true)

- name: Create sonarr DNS alias under proxy host override
  ansible.builtin.uri:
    url: "https://{{ groups['pfsense_host'][0] }}/api/v2/services/dns_resolver/host_override/alias"
    method: POST
    headers:
      X-API-Key: "{{ pfsense_api_key }}"
      Content-Type: "application/json"
    body_format: json
    body:
      parent_id: "{{ proxy_host_override.id }}"
      host: "sonarr"
      domain: "{{ internal_domain }}"
      descr: "Sonarr TV Show Management"
    validate_certs: false
    status_code: [200, 400]
  register: sonarr_dns_result
  delegate_to: localhost
  when:
    - arr_suite_configure_dns | default(true)
    - not sonarr_alias_exists
    - proxy_host_override | length > 0
  failed_when:
    - sonarr_dns_result.status == 400
    - "'already exists' not in (sonarr_dns_result.json.message | default(''))"

- name: Display DNS alias status for radarr
  ansible.builtin.debug:
    msg: >-
      {% if proxy_host_override | length == 0 %}
      Warning: Proxy host override not found in pfSense DNS
      {% elif radarr_alias_exists %}
      radarr DNS alias exists under proxy.{{ internal_domain }}
      {% else %}
      radarr DNS alias missing - will be created
      {% endif %}
  when: arr_suite_configure_dns | default(true)

- name: Create radarr DNS alias under proxy host override
  ansible.builtin.uri:
    url: "https://{{ groups['pfsense_host'][0] }}/api/v2/services/dns_resolver/host_override/alias"
    method: POST
    headers:
      X-API-Key: "{{ pfsense_api_key }}"
      Content-Type: "application/json"
    body_format: json
    body:
      parent_id: "{{ proxy_host_override.id }}"
      host: "radarr"
      domain: "{{ internal_domain }}"
      descr: "Radarr Movie Management"
    validate_certs: false
    status_code: [200, 400]
  register: radarr_dns_result
  delegate_to: localhost
  when:
    - arr_suite_configure_dns | default(true)
    - not radarr_alias_exists
    - proxy_host_override | length > 0
  failed_when:
    - radarr_dns_result.status == 400
    - "'already exists' not in (radarr_dns_result.json.message | default(''))"

- name: Display DNS alias status for prowlarr
  ansible.builtin.debug:
    msg: >-
      {% if proxy_host_override | length == 0 %}
      Warning: Proxy host override not found in pfSense DNS
      {% elif prowlarr_alias_exists %}
      prowlarr DNS alias exists under proxy.{{ internal_domain }}
      {% else %}
      prowlarr DNS alias missing - will be created
      {% endif %}
  when: arr_suite_configure_dns | default(true)

- name: Create prowlarr DNS alias under proxy host override
  ansible.builtin.uri:
    url: "https://{{ groups['pfsense_host'][0] }}/api/v2/services/dns_resolver/host_override/alias"
    method: POST
    headers:
      X-API-Key: "{{ pfsense_api_key }}"
      Content-Type: "application/json"
    body_format: json
    body:
      parent_id: "{{ proxy_host_override.id }}"
      host: "prowlarr"
      domain: "{{ internal_domain }}"
      descr: "Prowlarr Indexer Manager"
    validate_certs: false
    status_code: [200, 400]
  register: prowlarr_dns_result
  delegate_to: localhost
  when:
    - arr_suite_configure_dns | default(true)
    - not prowlarr_alias_exists
    - proxy_host_override | length > 0
  failed_when:
    - prowlarr_dns_result.status == 400
    - "'already exists' not in (prowlarr_dns_result.json.message | default(''))"

- name: Display DNS alias status for lidarr
  ansible.builtin.debug:
    msg: >-
      {% if proxy_host_override | length == 0 %}
      Warning: Proxy host override not found in pfSense DNS
      {% elif lidarr_alias_exists %}
      lidarr DNS alias exists under proxy.{{ internal_domain }}
      {% else %}
      lidarr DNS alias missing - will be created
      {% endif %}
  when: arr_suite_configure_dns | default(true)

- name: Create lidarr DNS alias under proxy host override
  ansible.builtin.uri:
    url: "https://{{ groups['pfsense_host'][0] }}/api/v2/services/dns_resolver/host_override/alias"
    method: POST
    headers:
      X-API-Key: "{{ pfsense_api_key }}"
      Content-Type: "application/json"
    body_format: json
    body:
      parent_id: "{{ proxy_host_override.id }}"
      host: "lidarr"
      domain: "{{ internal_domain }}"
      descr: "Lidarr Music Management"
    validate_certs: false
    status_code: [200, 400]
  register: lidarr_dns_result
  delegate_to: localhost
  when:
    - arr_suite_configure_dns | default(true)
    - not lidarr_alias_exists
    - proxy_host_override | length > 0
  failed_when:
    - lidarr_dns_result.status == 400
    - "'already exists' not in (lidarr_dns_result.json.message | default(''))"

- name: Display DNS alias status for sabnzbd
  ansible.builtin.debug:
    msg: >-
      {% if proxy_host_override | length == 0 %}
      Warning: Proxy host override not found in pfSense DNS
      {% elif sabnzbd_alias_exists %}
      sabnzbd DNS alias exists under proxy.{{ internal_domain }}
      {% else %}
      sabnzbd DNS alias missing - will be created
      {% endif %}
  when: arr_suite_configure_dns | default(true)

- name: Create sabnzbd DNS alias under proxy host override
  ansible.builtin.uri:
    url: "https://{{ groups['pfsense_host'][0] }}/api/v2/services/dns_resolver/host_override/alias"
    method: POST
    headers:
      X-API-Key: "{{ pfsense_api_key }}"
      Content-Type: "application/json"
    body_format: json
    body:
      parent_id: "{{ proxy_host_override.id }}"
      host: "sabnzbd"
      domain: "{{ internal_domain }}"
      descr: "SABnzbd Usenet Downloader"
    validate_certs: false
    status_code: [200, 400]
  register: sabnzbd_dns_result
  delegate_to: localhost
  when:
    - arr_suite_configure_dns | default(true)
    - not sabnzbd_alias_exists
    - proxy_host_override | length > 0
  failed_when:
    - sabnzbd_dns_result.status == 400
    - "'already exists' not in (sabnzbd_dns_result.json.message | default(''))"

- name: Display DNS alias status for qbittorrent
  ansible.builtin.debug:
    msg: >-
      {% if proxy_host_override | length == 0 %}
      Warning: Proxy host override not found in pfSense DNS
      {% elif qbittorrent_alias_exists %}
      qbittorrent DNS alias exists under proxy.{{ internal_domain }}
      {% else %}
      qbittorrent DNS alias missing - will be created
      {% endif %}
  when: arr_suite_configure_dns | default(true)

- name: Create qbittorrent DNS alias under proxy host override
  ansible.builtin.uri:
    url: "https://{{ groups['pfsense_host'][0] }}/api/v2/services/dns_resolver/host_override/alias"
    method: POST
    headers:
      X-API-Key: "{{ pfsense_api_key }}"
      Content-Type: "application/json"
    body_format: json
    body:
      parent_id: "{{ proxy_host_override.id }}"
      host: "qbittorrent"
      domain: "{{ internal_domain }}"
      descr: "qBittorrent Torrent Client"
    validate_certs: false
    status_code: [200, 400]
  register: qbittorrent_dns_result
  delegate_to: localhost
  when:
    - arr_suite_configure_dns | default(true)
    - not qbittorrent_alias_exists
    - proxy_host_override | length > 0
  failed_when:
    - qbittorrent_dns_result.status == 400
    - "'already exists' not in (qbittorrent_dns_result.json.message | default(''))"

- name: Apply DNS resolver changes
  ansible.builtin.uri:
    url: "https://{{ groups['pfsense_host'][0] }}/api/v2/services/dns_resolver/apply"
    method: POST
    headers:
      X-API-Key: "{{ pfsense_api_key }}"
    validate_certs: false
    status_code: 200
  delegate_to: localhost
  when:
    - arr_suite_configure_dns | default(true)
    - (sonarr_dns_result is changed) or
      (radarr_dns_result is changed) or
      (prowlarr_dns_result is changed) or
      (lidarr_dns_result is changed) or
      (sabnzbd_dns_result is changed) or
      (qbittorrent_dns_result is changed)

# Configure SWAG Internal Proxy
- name: Resolve arr_suite host IP for proxy configuration
  ansible.builtin.set_fact:
    arr_suite_proxy_ip: "{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}"
  when: arr_suite_configure_proxy | default(true)

- name: Deploy Sonarr nginx config to SWAG Internal
  ansible.builtin.template:
    src: sonarr.subdomain.conf.j2
    dest: "{{ proxy_folder }}/internal/nginx/proxy-confs/sonarr.subdomain.conf"
    mode: '0644'
  delegate_to: "{{ groups['proxy_host'][0] }}"
  notify:
    - Restart Swag
  when: arr_suite_configure_proxy | default(true)

- name: Deploy Radarr nginx config to SWAG Internal
  ansible.builtin.template:
    src: radarr.subdomain.conf.j2
    dest: "{{ proxy_folder }}/internal/nginx/proxy-confs/radarr.subdomain.conf"
    mode: '0644'
  delegate_to: "{{ groups['proxy_host'][0] }}"
  notify:
    - Restart Swag
  when: arr_suite_configure_proxy | default(true)

- name: Deploy Prowlarr nginx config to SWAG Internal
  ansible.builtin.template:
    src: prowlarr.subdomain.conf.j2
    dest: "{{ proxy_folder }}/internal/nginx/proxy-confs/prowlarr.subdomain.conf"
    mode: '0644'
  delegate_to: "{{ groups['proxy_host'][0] }}"
  notify:
    - Restart Swag
  when: arr_suite_configure_proxy | default(true)

- name: Deploy Lidarr nginx config to SWAG Internal
  ansible.builtin.template:
    src: lidarr.subdomain.conf.j2
    dest: "{{ proxy_folder }}/internal/nginx/proxy-confs/lidarr.subdomain.conf"
    mode: '0644'
  delegate_to: "{{ groups['proxy_host'][0] }}"
  notify:
    - Restart Swag
  when: arr_suite_configure_proxy | default(true)

- name: Deploy SABnzbd nginx config to SWAG Internal
  ansible.builtin.template:
    src: sabnzbd.subdomain.conf.j2
    dest: "{{ proxy_folder }}/internal/nginx/proxy-confs/sabnzbd.subdomain.conf"
    mode: '0644'
  delegate_to: "{{ groups['proxy_host'][0] }}"
  notify:
    - Restart Swag
  when: arr_suite_configure_proxy | default(true)

- name: Deploy qBittorrent nginx config to SWAG Internal
  ansible.builtin.template:
    src: qbittorrent.subdomain.conf.j2
    dest: "{{ proxy_folder }}/internal/nginx/proxy-confs/qbittorrent.subdomain.conf"
    mode: '0644'
  delegate_to: "{{ groups['proxy_host'][0] }}"
  notify:
    - Restart Swag
  when: arr_suite_configure_proxy | default(true)

# Configure Homepage Services
- name: Add arr_suite services to Homepage
  ansible.builtin.blockinfile:
    path: "{{ homepage_folder }}/config/services.yaml"
    marker: "# {mark} ANSIBLE MANAGED BLOCK - arr_suite services"
    block: "{{ lookup('template', 'homepage_services.yaml.j2') }}"
    insertafter: EOF
  delegate_to: "{{ groups['homepage_host'][0] }}"
  notify:
    - Restart Homepage
  when: arr_suite_configure_homepage | default(true)
